/*
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Brand;
import org.openapitools.client.model.Model;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Delete a brand by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void brandsBrandIdDeleteTest() throws ApiException {
        Integer brandId = null;
        api.brandsBrandIdDelete(brandId);

        // TODO: test validations
    }
    
    /**
     * Get a brand by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void brandsBrandIdGetTest() throws ApiException {
        Integer brandId = null;
        Brand response = api.brandsBrandIdGet(brandId);

        // TODO: test validations
    }
    
    /**
     * Update a brand by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void brandsBrandIdPutTest() throws ApiException {
        Integer brandId = null;
        Brand brand = null;
        api.brandsBrandIdPut(brandId, brand);

        // TODO: test validations
    }
    
    /**
     * Get all brands
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void brandsGetTest() throws ApiException {
        List<Brand> response = api.brandsGet();

        // TODO: test validations
    }
    
    /**
     * Create a new brand
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void brandsPostTest() throws ApiException {
        Brand brand = null;
        api.brandsPost(brand);

        // TODO: test validations
    }
    
    /**
     * Get all models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelsGetTest() throws ApiException {
        List<Model> response = api.modelsGet();

        // TODO: test validations
    }
    
}
