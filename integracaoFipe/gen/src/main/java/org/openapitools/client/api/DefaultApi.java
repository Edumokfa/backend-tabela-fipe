/*
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Brand;
import org.openapitools.client.model.Model;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for brandsBrandIdDelete
     * @param brandId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Brand deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsBrandIdDeleteCall(Integer brandId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/{brandId}"
            .replaceAll("\\{" + "brandId" + "\\}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandsBrandIdDeleteValidateBeforeCall(Integer brandId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling brandsBrandIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = brandsBrandIdDeleteCall(brandId, _callback);
        return localVarCall;

    }

    /**
     * Delete a brand by ID
     * 
     * @param brandId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Brand deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public void brandsBrandIdDelete(Integer brandId) throws ApiException {
        brandsBrandIdDeleteWithHttpInfo(brandId);
    }

    /**
     * Delete a brand by ID
     * 
     * @param brandId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Brand deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> brandsBrandIdDeleteWithHttpInfo(Integer brandId) throws ApiException {
        okhttp3.Call localVarCall = brandsBrandIdDeleteValidateBeforeCall(brandId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a brand by ID (asynchronously)
     * 
     * @param brandId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Brand deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsBrandIdDeleteAsync(Integer brandId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandsBrandIdDeleteValidateBeforeCall(brandId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for brandsBrandIdGet
     * @param brandId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsBrandIdGetCall(Integer brandId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands/{brandId}"
            .replaceAll("\\{" + "brandId" + "\\}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandsBrandIdGetValidateBeforeCall(Integer brandId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling brandsBrandIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = brandsBrandIdGetCall(brandId, _callback);
        return localVarCall;

    }

    /**
     * Get a brand by ID
     * 
     * @param brandId  (required)
     * @return Brand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public Brand brandsBrandIdGet(Integer brandId) throws ApiException {
        ApiResponse<Brand> localVarResp = brandsBrandIdGetWithHttpInfo(brandId);
        return localVarResp.getData();
    }

    /**
     * Get a brand by ID
     * 
     * @param brandId  (required)
     * @return ApiResponse&lt;Brand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Brand> brandsBrandIdGetWithHttpInfo(Integer brandId) throws ApiException {
        okhttp3.Call localVarCall = brandsBrandIdGetValidateBeforeCall(brandId, null);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a brand by ID (asynchronously)
     * 
     * @param brandId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsBrandIdGetAsync(Integer brandId, final ApiCallback<Brand> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandsBrandIdGetValidateBeforeCall(brandId, _callback);
        Type localVarReturnType = new TypeToken<Brand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for brandsBrandIdPut
     * @param brandId  (required)
     * @param brand  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsBrandIdPutCall(Integer brandId, Brand brand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brand;

        // create path and map variables
        String localVarPath = "/brands/{brandId}"
            .replaceAll("\\{" + "brandId" + "\\}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandsBrandIdPutValidateBeforeCall(Integer brandId, Brand brand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling brandsBrandIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = brandsBrandIdPutCall(brandId, brand, _callback);
        return localVarCall;

    }

    /**
     * Update a brand by ID
     * 
     * @param brandId  (required)
     * @param brand  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public void brandsBrandIdPut(Integer brandId, Brand brand) throws ApiException {
        brandsBrandIdPutWithHttpInfo(brandId, brand);
    }

    /**
     * Update a brand by ID
     * 
     * @param brandId  (required)
     * @param brand  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> brandsBrandIdPutWithHttpInfo(Integer brandId, Brand brand) throws ApiException {
        okhttp3.Call localVarCall = brandsBrandIdPutValidateBeforeCall(brandId, brand, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a brand by ID (asynchronously)
     * 
     * @param brandId  (required)
     * @param brand  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Brand updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Brand not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsBrandIdPutAsync(Integer brandId, Brand brand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandsBrandIdPutValidateBeforeCall(brandId, brand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for brandsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = brandsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get all brands
     * 
     * @return List&lt;Brand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public List<Brand> brandsGet() throws ApiException {
        ApiResponse<List<Brand>> localVarResp = brandsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all brands
     * 
     * @return ApiResponse&lt;List&lt;Brand&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Brand>> brandsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = brandsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Brand>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all brands (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsGetAsync(final ApiCallback<List<Brand>> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Brand>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for brandsPost
     * @param brand  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Brand created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsPostCall(Brand brand, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = brand;

        // create path and map variables
        String localVarPath = "/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandsPostValidateBeforeCall(Brand brand, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = brandsPostCall(brand, _callback);
        return localVarCall;

    }

    /**
     * Create a new brand
     * 
     * @param brand  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Brand created successfully </td><td>  -  </td></tr>
     </table>
     */
    public void brandsPost(Brand brand) throws ApiException {
        brandsPostWithHttpInfo(brand);
    }

    /**
     * Create a new brand
     * 
     * @param brand  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Brand created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> brandsPostWithHttpInfo(Brand brand) throws ApiException {
        okhttp3.Call localVarCall = brandsPostValidateBeforeCall(brand, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new brand (asynchronously)
     * 
     * @param brand  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Brand created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandsPostAsync(Brand brand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandsPostValidateBeforeCall(brand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = modelsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get all models
     * 
     * @return List&lt;Model&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public List<Model> modelsGet() throws ApiException {
        ApiResponse<List<Model>> localVarResp = modelsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all models
     * 
     * @return ApiResponse&lt;List&lt;Model&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Model>> modelsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = modelsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Model>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all models (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelsGetAsync(final ApiCallback<List<Model>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Model>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
